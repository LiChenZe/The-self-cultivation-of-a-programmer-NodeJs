博学之, 审问之, 慎思之, 明辨之, 笃行之;
壹、贰、叁、肆、伍、陆、柒、捌、玖、拾;

源码链接:   https://pan.baidu.com/s/1ataUp3udAuItUWOjnzdxTw
提取码:     zxyo

在Java,PHP,.Net等服务端语言中,会为每一个客户端连接创建一个新的线程,而每个线程需要消耗大约2MB内存;
理论上,一个8GB内存的服务器,可以同时连接的最大用户数为4000左右,(最大并发量为4000) 如果想要达到四万个并发量时,就需要十台服务器;
这样无疑提高了硬件成本;

NodeJs最擅长的是处理高并发,和传统的服务端语言不同之处正在于此;他不是为每个客户端连接新建一个线程;而仅仅使用同一个线程工作;当有用户连接时,触发内部
事件,通过非阻塞I/O,事件驱动机制使NodeJs宏观上实现并行,以此特性处理高并发;一个8GB内存的服务器,可以同时连接的最大用户数为40000
左右,(最大并发量为40000);减少硬件成本;

NodeJs可实现的功能: 实现接口,动态网站外,还可应用在云计算平台,游戏开发,区块链开发,即时通讯,跨平台APP开发,桌面应用开发,云直播
物联网领域等等...


壹.HTTP/URL模块&supervisor工具
    PHP来开发后段代码时,需要Apache活着Nginx的http服务器来处理客户端的请求响应;
    NodeJs开发后段代码不仅仅在实现一个应用,同时还实现了整个HTTP服务器(自带WEB服务器);
    
    VsCode 安装 NodeJs Snippets;

    安装 supervisor Node热更新工具;
    cnpm install supervisor -g
    安装完成后使用 supervisor代替node运行命令;

贰.CommonJs-SysModules-CustomModules


    系统模块: http, url, fs等NodeJs原生自带的模块;
    自定义模块: axios等后来通过cnpm安装的模块;
    
    自定义模块引入时会默认在一个叫做 node_modules的目录下查找;
    所以当引入node_modules目录下的模块时可以直接引入模块名称即可找到;
    引入时只需到目录名即可,默认读取目录名下的index.js文件;
    这个 node_modules 目录使得自定义模块的引入路径也可以像系统模块简介;
    比如:
        const baiduSearch = require('./node_modules/tools/index');
        路径可以简写为
        const baiduSearch = require('tools');

    暴露模块: exports 或 module.exports;
    引入模块: require('路径');

    在 node_modules 目录下的每一个模块下默认读取的都是index.js文件;
    如果我们不想让默认读取index.js, 而是想自定义此模块默认的读取文件时;
    在当前模块执行 npm init --yes 或 npm init -y
    --yes/-y 表示强制生成,等同于 npm init 时每一步执行yes
    此时模块下会多出package.json文件 (node的配置文件)
    文件中修改 mian (入口文件) 也就是默认读取的文件即可;

    注意 npm init 的执行环境,是在模块下而不是项目下;
    详见 node_modules/custom
    
    
叁.Package-NPM-ThirdModules
    完全符合CommonJs规范的包目录一般包含如下这些文件:
        package.js 包描述文件;
        bin: 用于存放可执行二进制文件的目录;
        lib: 用于存放JavaScript代码的目录;
        doc: 用于存放文档的目录;

    通过 NPM 下载第三方包;
    NPM 地址: https://www.npmjs.com
    
    NPM 常用命令:
        -v                  查看版本
        install             安装模块
        uninstall           卸载模块
        list                查看当前目录下已安装的node包;
        info xxx            查看xxx版本;
        init                生成包信息文件(package);
        install xxx@1.0     指定下载xxx版本为1.0
        ^1.0.1              第一位版本号不变,后两位取最新
        ~1.0.1              前两位版本号不变,最后一位取最新
        *1.0.1              全部取最新值

    dependencies:       通常安装包(正式环境依赖项)
    devDependencies:    通常安装工具(开发环境依赖项)




肆.FS

    fs常用方法:
        fs.stat                 检测是文件或是目录
        fs.mkdir                创建目录
        fs.writeFile            创建写入文件
        fs.appendFile           追加文件
        fs.readFile             读取文件
        fs.readdir              读取目录
        fs.rename               重命名
        fs.rmdir                删除目录
        fs.unlink               删除文件
        fs.createReadStream     从文件流中读取数据
        fs.createWriteStream    从文件流中写入文件
        createReadStream.pipe(createWriteStream)        管道流
        
    


伍.StaticWebServer
  目前主流的WEB服务器有: Apache, Nginx, IIS等
  
  NodeJs创建一个WEB服务器
  1.可以让我们访问web服务器上面的网站
  2.可以让我们下载web服务器上面的文件

  路由解释: 针对不同请求的URL, 处理不同的业务逻辑;
    

陆.ExpressPackage

陆.DataBase
    NoSql (No Only Sql), 意即“不仅仅是Sql”, 指非关系型数据库;
    和传统的关系型数据库不一样, 是以Key-value形式存储的;
    MongoDB是一个介于关系型数据库和非关系型数据库之间的产品;

    下载地址: https://www.mongodb.com/try/download/community
    我的放置目录为: /usr/local/mongodb

    查看并杀死mongodb进程
    ps -ef | grep mongodb
    kill -9 82666

    mongod -f /usr/local/mongodb/etc/mongodb.conf                                     启动MongoDB服务;
    db.shutdownServer({force:true})                                                   关闭MongoDB服务;
    mongo                                                                             启动MongoDB数据库;

    一.基础增删改查
      show dbs                                                                       查看所有数据库;
      use panda                                                                      创建Panda数据库(同时也是切换操作, 此时show dbs是查不到panda库的, 因为库里没数据);
      show collections                                                               查看数据库中所有的表;
      show tables                                                                    查看数据库中所有的表;
      db.createCollection('person')                                                  创建person表;
      db.person.insert({'username': 'leechenze'})                                    创建person表(就是在表中存入一条数据);
      db.person.find()                                                               查看person表中的数据;
      db.person.find({},{id:1, name:1})                                              查看person表中id和name字段的数据
      db.person.find({'age':'20'})                                                   查看person表中age为20的数据
      db.person.find({'age':{$gt:22}})                                               查看person表中age大于22的数据
      db.person.find({'age':{$lt:22}})                                               查看person表中age小于22的数据
      db.person.find({'age':{$gte:22}})                                              查看person表中age大于等于22的数据
      db.person.find({'age':{$lte:22}})                                              查看person表中age小于等于22的数据
      db.person.find({'age':{$lt:22,$gt:10}})                                        查看person表中age小于22并且大于10的数据;
      db.person.find({'name':/zhang/})                                               查看person表中name包含zhang字段的数据;
      db.person.find({'name':/^zhang/})                                              查看person表中name以zhang字段开头的数据;
      db.person.find({'name':/zhang$/})                                              查看person表中name以zhang字段结尾的数据;
      db.person.find({'age':20},{name:1})                                            查看person表中age为20的数据,只列出数据的name值;
      db.person.find({$or: [{name: 'lisi', name:'wangwu'}]})                         查找person表中name等于lisi或者wangwu的数据;
      db.person.find().sort({age:1})                                                 person表根据age进行排序(1为升序);
      db.person.find().sort({age:-1})                                                person表根据age进行排序(-1为降序); 
      db.person.find().limit(5)                                                      查询person表中前五条数据;
      db.person.find().skip(5)                                                       查询person表中第五条之后的数据;
      db.person.find().count()                                                       查询person表中有多少条数据;
      db.person.findOne()                                                            查询person表中第一条数据;
      db.person.find().sort({_id:-1}).limit(1)                                       查询person表中最后一条数据;
      db.person.update({'name':'lisi123'},{$set: {name: 'lisi'}})                    更改person表中name为lisi123的数据为lisi ($set 条件不加的话将替换数据); 
      db.person.update({'name':'lisi123'},{$set: {name: 'lisi'}},{multi:true})       multi:true 表示如果有多条lisi123的数据, 都会改为lisi;
      db.dropDatabase()                                                              删除数据库; 
      db.person.drop()                                                               删除表;
      db.person.remove({'name': 'list'})                                             删除person表中name为lisi的数据;
      db.person.remove({'age': {$gt: 20})                                            删除person表中age大于20的数据;
      db.person.remove({'age': {$gt: 20},{justOne:true})                             justOne:true 表示如果有多条age大于20的数据, 只会删除一条(也就是第21条);
      
      for(var i = 1; i <= 100; i++){                                                 在person表创建100条数据;
        db.person.insert({'username':'zhangsan' + i,'age': i});         
      }
      db.person.find().skip(30).limit(10);                                           查询第三十条之后的十条数据(分页操作);

    二.优化,索引,分析查询速度
      索引是对数据库表中一列或者多列的值进行排序的一种结构,可以使查询数据变得更快;
      MongoDB中的索引几乎和传统的关系型数据库的索引一摸一样;
      总结索引的作用就是: 优化查询时间,减少查询时间;      
      
      db.person.find().explain("executionStats")                                      查询执行信息;
        输出: explain.executionStats.executionTimeMillis                               查看查询执行时间;
      db.person.ensureIndex({username: 1})                                            创建索引 (注意username是要设置索引的字段名, 以字段名为索引, 1是升序, -1是倒序)
      db.person.createIndex({username: 1})                                            创建索引 createIndex 是mongo5.0 之后的写法, 去掉了 ensureIndex 的支持;
      db.person.createIndex({username: 1},{name:personIndex})                         createIndex的第二个参数是指定name,unique等其他参数的, name一般不用, 因为name有默认值, 而默认值就是username;
      db.person.createIndex({username: 1},{unique:true})                              唯一索引, 下面详解;
      db.person.getIndexes()                                                          获取表索引;
      db.person.dropIndex({username: 1})                                              删除表索引;
      
      复合索引:
        复合索引就是创建两个或多个索引, 在关联查询的情况下使用;
        db.person.createIndex({username: 1,age:1})
        以上面的语句为例,如果按着username和age索引进行查询时候会命中索引;
        按着username索引进行查询时也会命中索引;
        但如果按着age索引进行查询时则不会命中;
      唯一索引:
        如果给一个字段设置唯一索引以后,那这个字段值将不能重复;
        db.person.createIndex({username: 1},{unique:true});
        如果在给一个字段设置唯一索引时, 这个字段的值和其他数据的相同字段值重复时,将会报错; 报错信息如下:
        "E11000 duplicate key error collection: panda.person index: username_1 dup key: { username: \"zhangsan2\" }"
        如果给一个字段设置唯一索引后, 再次添加一条相同字段名和字段值时,也会报错; 报错信息如下:
        "An existing index has the same name as the requested index. When index names are not specified, they are auto generated and can cause conflicts."

    三.mongoDB账户权限配置
      1.创建超级管理账户 (首先切换到一个数据库, roles的值'root'表示超级管理员, 只有admin用户可以设置root权限, 其他用户设置root权限会报错,同时,还必须要切换到admin下才可以创建root);
        use admin
        db.createUser({                                                              创建数据库用户
          user: 'superadmin',
          pwd: '123456',
          roles: [{role: 'root', db: 'admin'}]
        })

        数据库用户角色
            read: 只读数据权限
            readWrite:读写数据权限
        数据库管理角色
            dbAdmin: 在当前db中执行管理操作的权限
            dbOwner: 在当前db中执行任意操作
            userADmin: 在当前db中管理user的权限
        备份和还原角色
            backup
            restore
        夸库角色
            readAnyDatabase: 在所有数据库上都有读取数据的权限
            readWriteAnyDatabase: 在所有数据库上都有读写数据的权限
            userAdminAnyDatabase: 在所有数据库上都有管理user的权限
            dbAdminAnyDatabase: 管理所有数据库的权限
        集群管理
            clusterAdmin: 管理机器的最高权限
            clusterManager: 管理和监控集群的权限
            clusterMonitor: 监控集群的权限
            hostManager: 管理Server
        超级权限
            root: 超级用户

      2.修改mongodb数据库配置文件 (/usr/local/mongodb/etc/mongodb.conf) (开启权限认证相关代码);
        配置:
          security:
            authorization:enabled
      3.重启数据库
        mongod --dbpath
      4.用超级管理员账户连接数据库
        show users                                                                      显示数据库有哪些用户 (前提是切换到要查看的数据库中);
        db.dropUser('superadmin')                                                       删除数据库用户
        db.updateUser('superadmin', {pwd: '12345678'})                                  更新密码
        db.auth('superadmin', '123456')                                                 密码认证
            一般在 mongo admin 后面没有 -u -p 指定账号密码参数时使用
            mongo admin
            db.auth('superadmin', '123456')
            等同于
            mongo admin -u superadmin -p 123456

        连接本地数据库: mongo admin -u 用户名 -p 密码
        连接远程数据库: mongo 数据库地址 -u 用户名 -p 密码
                例如: mongo 192.168.1.200:27017/admin -u superadmin -p 123456
      5.给panda数据库创建一个用户 (只能访问panda库 不能访问其他库)                          除了admin库外，其他库同样
        use panda
        db.createUser({                                                              创建数据库用户
          user: 'pandaadmin',
          pwd: '123456',
          roles: [{role: 'db', db: 'panda'}]
        })
        mongo panda -u pandaadmin -p 123456                                           连接panda数据库

    四.集合和集合的集中关系
        一对一
            一个人对应一个唯一的身份证号
        一对多
            一个班级对应多名学生
        多对多
            一个学生可以选择多门课程，而同一门课程可以被多个同学选修，彼此的对应关系即为多对多
    五.MongoDB聚合管道（aggregation pipeline）
        使用聚合管道可以对集合中的文档进行变换和组合
        管道操作符：
            $project:   增加，删除，重命名字段
            $match:     条件匹配，只满足条件的文档才能进入下一阶段
            $limit:     限制结果的数量
            $skip:      跳过文档的数量
            $sort:      条件排序
            $group:     条件组合结果
            $lookup:    用以引入其他集合的数据

        $project: 查看person表中 trade_no 和 all_price 字段的数据
            db.order.aggregate([
                {
                    $project: {trade_no:1, all_price:1}
                }
            ])
        $match：用于过滤文档,用法类似于find()方法中的参数, 查询 all_price 大于90的数据
            db.order.aggregate([
                {
                    $project: {trade_no:1, all_price:1}
                },
                {
                    $match: {all_price: {$gte: 90}}
                }
            ])
        $group：以 order_id 进行分组, 统计num字段之和到total字段中 (注意_id是固定写法，前面需要加入下划线)
            db.order_item.aggregate([
                {
                    $group: {_id:'$order_id', total: {$sum: '$num'}}
                }
            ])
        $sort：-1表示降序, 1表示升序。
            db.order.aggregate([
                {
                    $project: {trade_no:1, all_price:1}
                },
                {
                    $sort: {all_price: -1}
                }
            ])
        $limit: 限制查询结果条数
            db.order.aggregate([
                {
                    $project: {trade_no:1, all_price:1}
                },
                {
                    $sort: {all_price: -1}
                },
                {
                    $limit: 1
                }
            ])
        $skip:  跳过前N条数据进行查询 （如下：跳过 12 条之后进行数据查询）
            db.order.aggregate([
                {
                    $project: {trade_no:1, all_price:1}
                },
                {
                    $skip: 12
                }
            ])
        $lookup: 表关联
            db.order.aggregate([
                {
                    $lookup: {
                        from: "order_item",                 要关联的表
                        localField: "order_id",             主表（order）中要关联的字段
                        foreignField: "order_id",           关联表（order_item）中要关联的字段
                        as: "items"                         把关联的数据放置到的字段名称
                    }
                },
            ])
    六.数据库备份还原
        导出备份：
            mongodump -h localhost:27017 -d panda -u pandaadmin -p 123456 -o /Users/lee/Downloads
            -h      mongoDB所在服务器地址(原称数据库)
            -d      数据库
            -u      用户名
            -p      密码
            -o      导出路径
        恢复备份:
            mongorestore -h localhost:27017 -d panda -c order --dir /Users/lee/Downloads/dump/order.bson -u pandaadmin -p 123456
            -c      导入到那张表中(collections)
            --dir   导入路径

    七.Node连接MongoDB数据库
        官方文档:
        https://www.mongodb.com/docs/drivers/node/current/quick-start/
        https://mongodb.github.io/node-mongodb-native/Next/#update-a-document
