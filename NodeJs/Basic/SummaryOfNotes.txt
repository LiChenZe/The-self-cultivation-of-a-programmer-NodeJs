博学之, 审问之, 慎思之, 明辨之, 笃行之;
壹、贰、叁、肆、伍、陆、柒、捌、玖、拾;


在Java,PHP,.Net等服务端语言中,会为每一个客户端连接创建一个新的线程,而每个线程需要消耗大约2MB内存;
理论上,一个8GB内存的服务器,可以同时连接的最大用户数为4000左右,(最大并发量为4000) 如果想要达到四万个并发量时,就需要十台服务器;
这样无疑提高了硬件成本;

NodeJs最擅长的是处理高并发,和传统的服务端语言不同之处正在于此;他不是为每个客户端连接新建一个线程;而仅仅使用同一个线程工作;当有用户连接时,触发内部
事件,通过非阻塞I/O,事件驱动机制使NodeJs宏观上实现并行,以此特性处理高并发;一个8GB内存的服务器,可以同时连接的最大用户数为40000
左右,(最大并发量为40000);减少硬件成本;

NodeJs可实现的功能: 实现接口,动态网站外,还可应用在云计算平台,游戏开发,区块链开发,即时通讯,跨平台APP开发,桌面应用开发,云直播
物联网领域等等...


壹.HTTP/URL模块&supervisor工具
    PHP来开发后段代码时,需要Apache活着Nginx的http服务器来处理客户端的请求响应;
    NodeJs开发后段代码不仅仅在实现一个应用,同时还实现了整个HTTP服务器(自带WEB服务器);
    
    VsCode 安装 NodeJs Snippets;

    安装 supervisor Node热更新工具;
    cnpm install supervisor -g
    安装完成后使用 supervisor代替node运行命令;

贰.CommonJs-SysModules-CustomModules

    系统模块: http, url, fs等NodeJs原生自带的模块;
    自定义模块: axios等后来通过cnpm安装的模块;
    
    自定义模块引入时会默认在一个叫做 node_modules的目录下查找;
    所以当引入node_modules目录下的模块时可以直接引入模块名称即可找到;
    引入时只需到目录名即可,默认读取目录名下的index.js文件;
    这个 node_modules 目录使得自定义模块的引入路径也可以像系统模块简介;
    比如:
        const baiduSearch = require('./node_modules/tools/index');
        路径可以简写为
        const baiduSearch = require('tools');

    暴露模块: exports 或 module.exports;
    引入模块: require('路径');

    在 node_modules 目录下的每一个模块下默认读取的都是index.js文件;
    如果我们不想让默认读取index.js, 而是想自定义此模块默认的读取文件时;
    在当前模块执行 npm init --yes 或 npm init -y
    --yes/-y 表示强制生成,等同于 npm init 时每一步执行yes
    此时模块下会多出package.json文件 (node的配置文件)
    文件中修改 mian (入口文件) 也就是默认读取的文件即可;

    注意 npm init 的执行环境,是在模块下而不是项目下;
    详见 node_modules/custom
    
    
叁.Package-NPM-ThirdModules
    完全符合CommonJs规范的包目录一般包含如下这些文件:
        package.js 包描述文件;
        bin: 用于存放可执行二进制文件的目录;
        lib: 用于存放JavaScript代码的目录;
        doc: 用于存放文档的目录;

    通过 NPM 下载第三方包;
    NPM 地址: https://www.npmjs.com
    
    NPM 常用命令:
        -v                  查看版本
        install             安装模块
        uninstall           卸载模块
        list                查看当前目录下已安装的node包;
        info xxx            查看xxx版本;
        init                生成包信息文件(package);
        install xxx@1.0     指定下载xxx版本为1.0
        ^1.0.1              第一位版本号不变,后两位取最新
        ~1.0.1              前两位版本号不变,最后一位取最新
        *1.0.1              全部取最新值

    dependencies:       通常安装包(正式环境依赖项)
    devDependencies:    通常安装工具(开发环境依赖项)
